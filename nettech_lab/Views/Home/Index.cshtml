@{
    ViewData["Title"] = "Доклад";

}

<html>
<head>
    <link href="@Url.Content("~/css/style.css")" rel="stylesheet" type="text/css" />
</head>
<body>
    <div id="content"></div>
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js"></script>
    <script src="@Url.Content("~/js/phonebook.jsx")"></script>*@
    <center><img src="~/images/logo.svg" class="App-logo" alt="logo" /></center>
    <h1><strong>React.js - что это и зачем оно нам</strong></h1> 
    <br />
    <h2>Краткие сведения</h2>
    <div>
        <p>
            React — это библиотека для разработки интерфейсов, созданная Facebook.
            В последний год он приобрел особенную популярность, о нем постоянно пишут, 
            многие известные компании используют его в своих проектах.
        </p>
        <p>
            В React используется так называемый компонентный подход. В React нет
            контроллеров, вьюшек, моделей, шаблонов и т.д. — все есть компонент. 
            Компоненты можно и нужно переиспользовать, наследовать друг от друга, компоновать.
            Компонент — это своего рода строительная единица, из которой собирается интерфейс.
        </p>        

        <h2>Синтаксис</h2>
        <p>В React используется синтаксис JSX — это не HTML,
        это всего лишь синтаксический сахар для javascript-функций.
        Этот синтаксис может транслироваться в чистый javascript
        как непосредственно на странице, так и на этапе сборки.</p>

        <p>Функция render компонента в общем 
        случае вызывается при любом изменении состояния и свойства 
        компонента. Если для маленького компонента это не кажется страшным, 
        то для более или менее сложного постоянная перерисовка «на каждый чих»
        кажется избыточной. Но в React используется так называемый 
        виртуальный DOM (Virtual DOM). Фактически React работает с копией 
        реального DOM’а в оперативной памяти. Все изменения вносятся в это
        виртуальное дерево, потом текущая копия сравнивается с предыдущей
        копией и, наконец, в реальный DOM вносятся только отличия между
        этими копиями.</p>

        <p>Созданные компоненты могут быть с легкостью изменены и использованы заново в 
        новых проектах. Высокий процент переиспользования кода повышает покрываемость 
        тестами, что, в свою очередь, 
        приводит к более высокому уровню контроля качества. </p>

        <h2>Пример компонента</h2>
        <pre>

import React from 'react';
import './user.css';

class User extends React.Component {
    render () {
        return &ltdiv className='user'>
                    &ltimg src={this.props.avatar} />
                     &ltspan>{this.props.name} &lt/span>
                     &ltdiv>;
    }
}            </pre>
        <p>
            Чтобы использовать компонент, его нужно предварительно подключить, а потом 
            можно вызвать по аналогии с обычным HTML-тегом. Свойства компонента передаются 
            как атрибуты, а внутри компонента они доступны с помощью this.props.
        </p>

        <h2>Заключение</h2>
        Мы рассмотрели базовые возможности и особенности React.
        Это востребованная и удобная технология, ползволяющаяя разработчикам решать
        следующие задачи:

        <ol>
            <li>Улучшения пользовательского опыта сайтов и приложений
            <li>
                Улучшения пользовательского опыта ваших сайтов и приложений
            <li>Увеличения скорости разработки
            <li>
                Использования наиболее трендовых технологий разработки
                
        </ol>
        
    </div>
</body>
</html>
